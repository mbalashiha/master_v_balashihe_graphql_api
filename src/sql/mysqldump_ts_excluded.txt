// On Windows Only...
import { spawn, SpawnOptionsWithoutStdio } from "node:child_process";
import path from "path";
import fs from "fs";
import fsa from "fs/promises";
import fse from "fs-extra";
import delay from "delay";
const mysqldumpExePathes = [
  "/usr/bin/mysqldump",
  `C:\\Program Files\\MariaDB 10.10\\bin\\mysqldump.exe`,
  `D:\\Program Files\\MariaDB 10.10\\bin\\mysqldump.exe`,
];
const mysqlExePathes = [
  "/usr/bin/mysql",
  `C:\\Program Files\\MariaDB 10.10\\bin\\mysql.exe`,
  `D:\\Program Files\\MariaDB 10.10\\bin\\mysql.exe`,
];

const root_user_name = process.env["SUPER_SECRET_MYSQL_USER"] || "";
const root_user_password = process.env["SUPER_SECRET_MYSQL_PASS"] || "";
const MYSQL_HOST = (process.env["MYSQL_HOST"] || "").trim();
const MYSQL_DB = process.env["MYSQL_DB"] || "";
const MYSQL_USER = process.env["MYSQL_USER"] || "";
const MYSQL_PASS = process.env["MYSQL_PASS"] || "";

const path_to_dump_dir = path.resolve("mysql-full-dump");

const getFirstExistingPath = async (pathes: Array<string>): Promise<string> => {
  for (const tryPath of pathes) {
    try {
      if (await fse.pathExists(tryPath)) {
        return tryPath;
      }
    } catch (e) {}
  }
  throw new Error(
    "No one file path exists from array: " + JSON.stringify(pathes, null, 2)
  );
};
const getMysqldumpExePath = () => {
  return getFirstExistingPath(mysqldumpExePathes);
};
const getMysqlExePath = () => {
  return getFirstExistingPath(mysqlExePathes);
};
export const spawnAsync = (
  command: string,
  args?: readonly string[] | undefined,
  writeStream?: fs.WriteStream
): Promise<string> =>
  new Promise((resolve, reject) => {
    let stdout: string = "",
      stderr: string = "";
    const bat = spawn(command, args);
    if (writeStream) {
      bat.stdout.pipe(writeStream);
    } else {
      bat.stdout.on("data", (data) => {
        stdout += data.toString();
      });
    }
    bat.stderr.on("data", (data) => {
      stderr += data.toString();
    });

    bat.on("exit", (code) => {
      // if (writeStream) {
      //   writeStream.close();
      // }
      /** if (stderr) {
        console.error(stderr.trim());
      } **/
      /** if (stdout) {
        console.log(stdout.trim());
      } **/
      if (code == 0) {
        resolve(stdout || stderr);
      } else {
        console.error(`---> Spawned child process exited with code ${code}`);
        reject(stderr || stdout);
      }
    });
  });
export const spawnMysqldump = async () => {
  let machineIP: string;
  try {
    machineIP = await spawnAsync(`hostname`, ["-I"]);
    if (machineIP) {
      machineIP = machineIP.trim();
      // console.log("Machine IP:", machineIP);
    }
  } catch (e: any) {
    machineIP = "";
    console.error(
      "\n\nError while checking machine network ip:",
      e.stack || e.message || e,
      "\n\n"
    );
  }
  // console.log("machineIP:", machineIP);
  // console.log("MYSQL_HOST:", MYSQL_HOST);
  const TARGET_MYSQL_HOST =
    !MYSQL_HOST || (machineIP && machineIP.trim() === (MYSQL_HOST || "").trim())
      ? "localhost"
      : MYSQL_HOST;
  const dateString = new Date().toISOString().split("T")[0];
  const getCurrentDayDumpFile = (databaseName: string) =>
    path.join(
      path_to_dump_dir,
      dateString,
      `${dateString}-${databaseName}-full-dump.sql`
    );
  if (!root_user_password) {
    throw new Error("No root_user_password!");
  }
  console.log("process cwd:", process.cwd());
  const [mysqlExePath, mysqldumpExePath] = await Promise.all([
    getMysqlExePath(),
    getMysqldumpExePath(),
  ]);
  console.log(
    `mysqlExePath: "${mysqlExePath}", mysqldumpExePath: "${mysqldumpExePath}"`
  );
  let text: string;
  try {
    text = await spawnAsync(mysqlExePath, [
      "-h",
      TARGET_MYSQL_HOST,
      "-u",
      root_user_name,
      "-p" + root_user_password,
      "-e",
      "SHOW DATABASES;",
    ]);
  } catch (e: any) {
    text = "";
    console.error(e.stack || e.message || e);
  }
  if (!text) {
    const databaseName = MYSQL_DB;
    try {
      const currentDatabaseDumpFilepath = getCurrentDayDumpFile(
        databaseName + "__not_root_user"
      );
      if (!(await fse.pathExists(currentDatabaseDumpFilepath))) {
        console.log(
          `---> ${databaseName}. processing database: ${databaseName}`
        );
        await fse.mkdirp(path.dirname(currentDatabaseDumpFilepath));
        await spawnAsync(
          mysqldumpExePath,
          [
            "-h",
            TARGET_MYSQL_HOST,
            "-u",
            MYSQL_USER,
            "-p" + MYSQL_PASS,
            "--databases",
            databaseName,
            "--hex-blob",
            // "--add-drop-trigger",
            "--routines",
            "--triggers",
            "--single-transaction",
          ],
          fs.createWriteStream(currentDatabaseDumpFilepath)
        );
        await delay(10);
        if (await fse.pathExists(currentDatabaseDumpFilepath)) {
          console.log(
            `Database "${databaseName}" successfully dumped to file: "${currentDatabaseDumpFilepath}"`
          );
        }
      }
      console.log("mysql database dumping finished!");
    } catch (e: any) {
      console.error(`\n\nError dumping database: ${databaseName}`);
      console.error(e.stack || e.message || e, "\n\n");
    }
  } else {
    const databaseList = text
      .split("\n")
      .map((el) => el.trim())
      .filter((el, ind) => el && ind > 0);
    console.log(databaseList);
    for (const databaseName of databaseList) {
      try {
        const currentDatabaseDumpFilepath = getCurrentDayDumpFile(databaseName);
        if (!(await fse.pathExists(currentDatabaseDumpFilepath))) {
          console.log(
            `---> ${databaseName}. processing database: ${databaseName}`
          );
          await fse.mkdirp(path.dirname(currentDatabaseDumpFilepath));
          await spawnAsync(
            mysqldumpExePath,
            [
              "-h",
              TARGET_MYSQL_HOST,
              "-u",
              root_user_name,
              "-p" + root_user_password,
              "--databases",
              databaseName,
              "--hex-blob",
              // "--add-drop-trigger",
              "--routines",
              "--triggers",
              "--single-transaction",
            ],
            fs.createWriteStream(currentDatabaseDumpFilepath)
          );
        }
      } catch (e: any) {
        console.error(`Error dumping database: ${databaseName}\n\n`);
      }
    }
    // console.log("mysql database dumping finished!");
  }
};
