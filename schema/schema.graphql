type PageInfo {
  pagination: Pagination
}
type Pagination {
  startCursor: Int
  endCursor: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}
type Price {
  amount: Int
  currencyCode: String
}

type PriceRange {
  minVariantAmount: Int
  maxVariantAmount: Int
  currencyCode: String
}

type Image {
  imageId: ID
  originalSrc: String
  altText: String
  height: Int
  width: Int
  products: [Product]
}

type Option {
  optionId: ID
  name: String
  values: [String]
}

type SelectedOption {
  optionId: ID
  name: String
  value: String
}

type Variant {
  variantId: ID
  title: String
  sku: String
  selectedOptions: [SelectedOption]
  price: Price
  compareAtPrice: Price
  image: Image
  product: Product
}

type Value {
  label: String
  isDefault: Boolean
  hexColors: [String]
}

type ProductOption {
  optionId: Int
  name: String
  values: [String]
}
type ImageConnection {
  nodes: [Image]
}
type VariantConnection {
  nodes: [Variant]
}
type Product {
  productId: ID!
  title: String
  handle: String
  description: String
  descriptionHtml: String
  vendor: String
  price: Price
  priceRange: PriceRange
  options: [ProductOption]
  image: Image
  images(limit: Int): ImageConnection
  variants(limit: Int): VariantConnection
}

type CheckoutUserError {
  field: String
  message: String
}

type LineItem {
  id: ID!
  cursor: ID!
  quantity: Int
  title: String
  unityPrice: Price
  variant: Variant
  product: Product
}

type Checkout {
  cursor: ID!
  id: ID!
  webUrl: String
  subtotalPrice: Price
  totalTax: Price
  totalPrice: Price
  completedAt: String
  createdAt: String
  taxesIncluded: Boolean
  lineItems(first: Int): [LineItem]
}

type CheckoutResponse {
  checkoutUserErrors: [CheckoutUserError]
  checkout: Checkout
}
type ProductConnection {
  nodes(offset: Int = 0, limit: Int = 250): [Product]
}
type Query {
  products(offset: Int, limit: Int): ProductConnection
  productByHandle(handle: String): Product
  hello: String
}

input CheckoutLineItemInput {
  variantId: ID
  quantity: Int
}

input CheckoutLineItemUpdateInput {
  id: ID
  variantId: ID
  quantity: Int
}

input CheckoutCreateInput {
  id: ID
}

type Mutation {
  checkoutCreate(input: CheckoutCreateInput): CheckoutResponse
  checkoutLineItemsAdd(
    checkoutId: ID
    lineItems: [CheckoutLineItemInput]
  ): CheckoutResponse
  checkoutLineItemsUpdate(
    checkoutId: ID
    lineItems: [CheckoutLineItemUpdateInput]
  ): CheckoutResponse
  checkoutLineItemsRemove(checkoutId: ID, lineItemIds: [ID]): CheckoutResponse
}
