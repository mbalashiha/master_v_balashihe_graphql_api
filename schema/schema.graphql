type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}
type Pagination {
  startCursor: Int
  endCursor: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}
type Price {
  amount: Float
  currencyCode: String
}

type PriceRange {
  minVariantAmount: Int
  maxVariantAmount: Int
  currencyCode: String
}

type Image {
  imageId: ID
  originalSrc: String
  altText: String
  height: Int
  width: Int
  products: [Product]
}

type Option {
  optionId: ID
  name: String
  values: [String]
}

type SelectedOption {
  optionId: ID
  optionName: String
  optionValue: String
}

type ProductVariant {
  variantId: ID
  title: String
  sku: String
  selectedOptions: [SelectedOption]
  price: Price
  compareAtPrice: Price
  image: Image
  product: ProductConnection
}

type Value {
  label: String
  isDefault: Boolean
  hexColors: [String]
}

type ProductOption {
  optionId: Int
  name: String
  values: [String]
}
type ImageConnection {
  nodes: [Image]
}
type VariantConnection {
  nodes: [ProductVariant]
}
type Product {
  productId: ID!
  title: String
  handle: String
  description: String
  descriptionHtml: String
  vendor: String
  price: Price
  priceRange: PriceRange
  options: [ProductOption]
  image: Image
  images(limit: Int): ImageConnection
  variants(limit: Int): VariantConnection
}
type CheckoutUserError {
  field: String
  message: String
}
type UserError {
  field: String
  message: String
}
type LineItem {
  checkoutId: ID!
  variantId: ID!
  quantity: Int
  title: String
  product: ProductConnection
  variant: ProductVariant
  image: Image
}
type LineItemConnection {
  pageInfo: PageInfo
  nodes: [LineItem]
}
type Checkout {
  checkoutId: ID!
  webUrl: String
  subtotalPrice: Price
  totalTax: Price
  totalPrice: Price
  completedAt: String
  createdAt: String
  taxesIncluded: Boolean
  lineItems(offset: Int = 0, limit: Int = 250): LineItemConnection
}
type CheckoutConnection {
  checkout: Checkout
}
type ProductConnection {
  nodes(offset: Int = 0, limit: Int = 250): [Product]
  node(id: ID): Product
}
input CheckoutLineItemInput {
  variantId: ID!
  quantity: Int!
}
input CheckoutCreateInput {
  checkoutId: ID = null
  lineItems: [CheckoutLineItemInput!]!
}
type CheckoutResponse {
  checkoutUserErrors: [CheckoutUserError]
  checkoutConnection: CheckoutConnection
}
type ImageInfo {
  imgSrc: String
  width: Int!
  height: Int!
  format: String
  orderNumber: Int!
  createdAt: String
  updatedAt: String
}
input ImageInfoInput {
  imgSrc: String
  width: Int
  height: Int
  format: String
  orderNumber: Int
}
input ProductCategoryInput {  
  id: ID
  name: String
  parentId: String
  productsCount: Int
}
input SlugInput {
  name: String!
  slug: String!
}
input CreateCategoryInput {
  parentCategory: ProductCategoryInput
  slugs: [SlugInput!]!
}
type UploadedImagesResponse {
  userErrors: [UserError]
  imagesConnection: UploadedImagesConnection
}
type RemovedImagesResponse {
  userErrors: [UserError]
  removedImages: [ImageInfo]
  imagesConnection: UploadedImagesConnection
}
type UploadedImagesConnection {
  draftProductId: ID
  images: UploadedImagesNodes
}
type UploadedImagesNodes {
  nodes: [ImageInfo]
}
type CurrencyCode {
  currencyCodeId: ID!
  currencyCode: String!
  symbolCode: String
}
type ProductCategory {
  id: ID!
  name: String!
  slug: String
  parentId: String
  productsCount: Int
  breadcrumbs: [String]
}
type CurrencyCodesResponse {
  nodes: [CurrencyCode!]!
}
type ProductsCategoriesResponse {
  userErrors: [UserError]
  createdCategory: ProductCategory
  categoriesConnection: ProductsCategoriesConnection
}
type RemovedCategoryResponse {
  userErrors: [UserError]
  categoriesConnection: ProductsCategoriesConnection
}
type ProductsCategoriesConnection {
  nodes: [ProductCategory!]!
}
type Mutation {
  checkoutLineItemsAdd(input: CheckoutCreateInput): CheckoutResponse
  checkoutLineItemsUpdate(input: CheckoutCreateInput): CheckoutResponse
  checkoutLineItemsRemove(checkoutId: ID!, lineItemIds: [ID]): CheckoutResponse
  productImagesUpdate(draftProductId: ID = null, images: [ImageInfoInput!]!): UploadedImagesResponse
  removeProductImage(draftProductId: ID!, images: [ImageInfoInput!]!): RemovedImagesResponse
  createProductCategory(categoryInput: CreateCategoryInput!): ProductsCategoriesResponse
  removeProductCategory(categoryId: ID): ProductsCategoriesResponse
}
type Query {
  products(offset: Int, limit: Int): ProductConnection
  productByHandle(handle: String): Product
  hello: String
  checkout(id: ID!): CheckoutConnection
  draftProductImages(draftProductId: ID!): UploadedImagesResponse
  priceCurrencyCodes: CurrencyCodesResponse
  productsCategories: ProductsCategoriesConnection
}
